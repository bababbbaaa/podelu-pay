const TelegramBot = require('node-telegram-bot-api');
const dotenv = require('dotenv');
const { Api, TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');

const { initializeApp } = require('firebase/app');
require('firebase/firestore');
const { doc, getFirestore, setDoc, Timestamp } = require('firebase/firestore');
const crypto = require('crypto');

const firebaseApp = initializeApp({
    apiKey: 'AIzaSyDln11HXwFB7pIYD_ySyIl_j1RWnurxJ34',
    authDomain: 'podelu-309ea.firebaseapp.com',
    projectId: 'podelu-309ea',
    storageBucket: 'podelu-309ea.appspot.com',
    messagingSenderId: '444086589170',
    appId: '1:444086589170:web:04bd8a745bf313cd68226b',
    measurementId: 'G-VZ52GHSV6T',
});

dotenv.config();

(async () => {
    const apiId = parseInt(process.env.API_ID);
    const apiHash = process.env.API_HASH;

    const session = new StringSession(process.env.SESSION_STRING); // You should put your string session here
    const client = new TelegramClient(session, apiId, apiHash, {});

    const token = process.env.PAYMENT_BOT_ACCESS_TOKEN;
    const bot = new TelegramBot(token, { polling: true });

    const notificationChatId = -1001899025139;
    const chatProlongPrice = 50;
    const chatPrice = 4900;
    const yearProlongPrice = 29000;

    await client.connect();

    const getUser = async () => {
        const result = await client.invoke(
            new Api.users.GetFullUser({
                id: 147796272,
            })
        );
        return result;
    };

    bot.on('message', async (msg) => {
        if (msg.text === '–ü—Ä–æ–¥–ª–∏—Ç—å') {
            bot.sendInvoice(
                msg.chat.id,
                '–ß–∞—Ç –ø–æ –¥–µ–ª—É',
                '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ß–∞—Ç–∞ –ø–æ –¥–µ–ª—É',
                JSON.stringify({ from: msg.from.id }),
                process.env.ROBOKASSA_PAYMENT_ACCESS_TOKEN,
                'RUB',
                JSON.stringify([
                    {
                        label: '–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞',
                        amount: chatProlongPrice * 100,
                    },
                    {
                        label: '–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞',
                        amount: chatProlongPrice * 0.03 * 100,
                    },
                ])
            );
        }

        if (msg.text === '/start') {
            bot.sendMessage(
                msg.chat.id,
                `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–ª–∞—Ç—ë–∂–Ω—ã–π –±–æ—Ç –ß–∞—Ç–∞ –ø–æ –¥–µ–ª—É. üëã \n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ: \n\nüî∏ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ —á–∞—Ç (–∫–æ–º–∞–Ω–¥–∞ /join)\nüî∏ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ —á–∞—Ç (–∫–æ–º–∞–Ω–¥–∞ /prolong)\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @nicholasitnikov
                `
            );
        }

        if (msg.text === '–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç') {
            bot.sendMessage(
                msg.chat.id,
                '–î–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –≤ —á–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å @nicholasitnikov'
            );
        }

        if (msg.text === '–ü—Ä–æ–¥–ª–∏—Ç—å 22c585f75c24d937f90165dc341b1dbd') {
            // –æ—Ç–∑—ã–≤
            bot.sendInvoice(
                msg.chat.id,
                '–ß–∞—Ç –ø–æ –¥–µ–ª—É',
                '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –∑–∞ –æ—Ç–∑—ã–≤',
                JSON.stringify({ from: msg.from.id }),
                process.env.ROBOKASSA_PAYMENT_ACCESS_TOKEN,
                'RUB',
                JSON.stringify([
                    {
                        label: '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞',
                        amount: 1450 * 100,
                    },
                    {
                        label: '–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞',
                        amount: 1450 * 0.03 * 100,
                    },
                ])
            );
        }

        if (msg.text === '–û–ø–ª–∞—Ç–∏—Ç—å –≥–æ–¥') {
            // –≥–æ–¥
            bot.sendInvoice(
                msg.chat.id,
                '–ß–∞—Ç –ø–æ –¥–µ–ª—É',
                '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –≥–æ–¥',
                JSON.stringify({ from: msg.from.id }),
                process.env.ROBOKASSA_PAYMENT_ACCESS_TOKEN,
                'RUB',
                JSON.stringify([
                    {
                        label: '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –≥–æ–¥',
                        amount: yearProlongPrice * 100,
                    },
                    {
                        label: '–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞',
                        amount: yearProlongPrice * 0.03 * 100,
                    },
                ])
            );
        }
    });

    bot.on('pre_checkout_query', (query) => {
        bot.answerPreCheckoutQuery(query.id, true);
    });

    bot.on('successful_payment', async (message) => {
        const result = await getUser(message.from.id);
        try {
            bot.sendMessage(
                notificationChatId,
                `–ü—Ä–∏—à–ª–æ ${message.successful_payment.total_amount / 100}‚ÇΩ –æ—Ç @${
                    result?.users[0]?.username
                }`
            );
        } catch (error) {}

        try {
            await setDoc(
                doc(getFirestore(firebaseApp), 'payments', crypto.randomUUID()),
                {
                    from: message.from.id,
                    price: message.successful_payment.total_amount / 100,
                    created_at: Timestamp.fromDate(new Date()),
                }
            );
        } catch (error) {}

        const messageText =
            '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–ø–ª–∞—Ç—É. –î–æ—Å—Ç—É–ø –≤ —á–∞—Ç –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ –º–µ—Å—è—Ü ü§ù';
        bot.sendMessage(message.chat.id, messageText);
    });
})();
